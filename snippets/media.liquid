{%- comment -%}
----------------------------------------------------------------------------------------------------------------------
MEDIA COMPONENT
----------------------------------------------------------------------------------------------------------------------

Renders a single media. This snippet can be used for product media, but also for media coming from metafields.

********************************************
Supported variables
********************************************

* media: the media to render (required)
* mobile_media: an optional media to render on mobile
* preload: if set to true, the image is preloaded and its fetch priority is higher. This will be ignored if the section being rendered is after the third
           section in the page (in which case lazyloading will be forced). For videos, preload will set the preload attribute to "metadata"
* class: optional class applied on the item (in case a <picture> tag is generated, the class is still passed to the <img> tag)
* style: optional inline styles applied on the item (if a mobile_media is passed, it is added on the picture element for images)
* block: a block context
* 
* [Image specific attributes]
*
* sizes: an optional sizes attribute used for the image generation
* draggable: an optional boolean indicating if the image should be draggable
* max_width: an optional maximum width for the image
* mobile_max_width: an optional maximum width for the image on mobile
* 
* [Video specific attributes]
* 
* autoplay: a boolean indicating if media of type video should autoplay. If set to false, a "play button" will be displayed on top of video
* id: an optional ID to allow a button to control the video
* loop: a boolean indicating if media type of type video should loop
* muted: a boolean indicating if the video must be muted or not. If autoplay is set to true, muted is forced.
* playsinline: controls if the video should be played inline. If none is passed, it will be set to true if the video is autoplaying
* controls: if set to true, then the controls for the video are displayed
* poster: for video media, a custom poster that will override the default one
* group: an optional group to set for the media. When a group is set, only one media at a time of the given group can play.
* show_play_button: by default, a play button is added when video is not autoplaying. By setting it to false you can force turning off this behavior.
* show_play_cursor: if set to true and that the video is not autoplaying, a play cursor will be displayed on top. Because touch devices do not have
                    a cursor, this will only be displayed on non-touch devices.
{%- endcomment -%}

{%- liquid
  assign sizes = sizes | default: '100vw'
  assign fetchpriority = nil

  if preload and section.index <= 3
    assign loading = 'eager'

    if section.index == 1
      assign fetchpriority = 'high'
    endif
  elsif preload == false
    assign loading = 'lazy'

    # If we are using lazyloading, we add "auto" to the sizes attribute to make sure the browser can decide the best size to load. This is currently
    # only supported on Chrome (as of 2024), so this is a progressive enhancement.
    assign sizes = sizes | prepend: 'auto, '
  endif
-%}

{%- assign media_type = media.media_type | default: 'image' -%}

{%- case media_type -%}
  {%- when 'image' -%}
    {%- if mobile_media != blank -%}
      <picture {{ block.shopify_attributes }}>
        {%- if mobile_media != blank -%}
          <source
              media="(max-width: 999px)"
              srcset="{{ mobile_media | image_url: width: 400 }} 400w, {{ mobile_media | image_url: width: 600 }} 600w, {{ mobile_media | image_url: width: 800 }} 800w, {{ mobile_media | image_url: width: 1000 }} 1000w"
              width="{{ mobile_media.width }}"
              height="{{ mobile_media.height }}"
          >
        {%- endif -%}

        {%- capture image_style_attribute -%}{% if max_width != blank %}--image-max-width: {{ block.settings.max_width }}%;{% endif %} {% if mobile_max_width != blank %}--image-mobile-max-width: {{ block.settings.mobile_max_width }}%{% endif %}{%- endcapture -%}
        
        {%- liquid
          assign image_class = class
          
          if image_style_attribute != blank
            assign image_class = image_class | append: ' constrained-image'
          endif

          echo media | image_url: width: media.preview_image.width | image_tag: loading: loading, fetchpriority: fetchpriority, sizes: sizes, widths: '200,300,400,500,600,700,800,1000,1200,1400,1600,1800,2000,2200,2400,2600,2800,3000,3200', draggable: draggable, class: image_class, style: image_style_attribute
        -%}
      </picture>
    {%- else -%}
      {%- capture image_style_attribute -%}{% if max_width != blank %}--image-max-width: {{ block.settings.max_width }}%;{% endif %} {% if mobile_max_width != blank %}--image-mobile-max-width: {{ block.settings.mobile_max_width }}%{% endif %}{%- endcapture -%}

      {%- liquid
        assign image_class = class
          
        if image_style_attribute != blank
          assign image_class = image_class | append: ' constrained-image'
        endif

        echo media | image_url: width: media.preview_image.width | image_tag: loading: loading, fetchpriority: fetchpriority, sizes: sizes, widths: '200,300,400,500,600,700,800,1000,1200,1400,1600,1800,2000,2200,2400,2600,2800,3000,3200', draggable: draggable, class: image_class, style: image_style_attribute
      -%}
    {%- endif -%}

  {%- when 'video', 'external_video' -%}
    <video-media {% if id %}id="{{ id }}"{% endif %} {% if class %}class="{{ class }}"{% endif %} {% if style %}style="{{ style }}"{% endif %} type="{{ media_type }}" {% if media.host %}host="{{ media.host }}"{% endif %} {% if autoplay %}autoplay{% endif %} {% if playsinline %}playsinline{% endif %} {% if autoplay != true and show_play_button != false %}show-play-button{% endif %} {% if group != blank %}group="{{ group | escape }}"{% endif %} style="--aspect-ratio: {{ media.aspect_ratio }}; {% if mobile_media != blank %}--mobile-aspect-ratio: {{ mobile_media.aspect_ratio }}{% endif %}" {{ block.shopify_attributes }}>
      {%- unless autoplay -%}
        {%- assign custom_poster = poster | default: media.preview_image -%}
        {%- assign poster_class = '' -%}

        {%- if mobile_media != blank -%}
          {%- assign mobile_custom_poster = poster | default: mobile_media.preview_image -%}
          {%- assign poster_class = 'md-max:hidden' -%}

          {{- mobile_custom_poster | image_url: width: mobile_custom_poster.width | image_tag: loading: loading, fetchpriority: fetchpriority, sizes: sizes, widths: '200,300,400,500,600,700,800,1000,1200,1400,1600,1800,2000,2200,2400,2600,2800,3000,3200', class: 'md:hidden' -}}
        {%- endif -%}

        {{- custom_poster | image_url: width: custom_poster.width | image_tag: loading: loading, fetchpriority: fetchpriority, sizes: sizes, widths: '200,300,400,500,600,700,800,1000,1200,1400,1600,1800,2000,2200,2400,2600,2800,3000,3200', class: poster_class -}}
      {%- endunless -%}

      {%- if media_type == 'video' -%}
        {%- liquid
          if preload
            assign preload_attribute = 'auto'
          else
            assign preload_attribute = 'metadata'
          endif

          assign playsinline = playsinline | default: autoplay, allow_false: true
          assign muted = muted | default: autoplay, allow_false: true
        -%}

        {%- comment -%}
          We roll our own because the native video_tag filter is too limited (it does not allow to set different sources for mobile, 
          and does not set the width/height)
        {%- endcomment -%}

        <video width="{{ media.sources.first.width }}" height="{{ media.sources.first.height }}" {% if playsinline %}playsinline{% endif %} {% if muted %}muted{% endif %} {% if loop %}loop{% endif %} {% if controls %}controls{% endif %} preload="{{ preload_attribute }}">
          {%- if mobile_media != blank -%}
            {%- for source in mobile_media.sources -%}
              <source media="(max-width: 999px)" src="{{ source.url }}" width="{{ source.width }}" height="{{ source.height }}" type="{{ source.mime_type }}">
            {%- endfor -%}
          {%- endif -%}

          {%- for source in media.sources -%}
            <source src="{{ source.url }}" width="{{ source.width }}" height="{{ source.height }}" type="{{ source.mime_type }}">
          {%- endfor -%}

          {{- media.preview_image | image_url: width: 400 | image_tag -}}
        </video>
      {%- else -%}
        <template>
          {%- liquid
            if media.host == 'youtube'
              echo media | external_video_url: enablejsapi: true, loop: loop, mute: autoplay, autoplay: true | external_video_tag
            elsif media.host == 'vimeo'
              echo media | external_video_url: autopause: true, loop: loop, background: autoplay, muted: autoplay, autoplay: true | external_video_tag
            else
              echo media | external_video_tag: image_size: '2048x'
            endif
          -%}
        </template>
      {%- endif -%}

      {%- if show_play_cursor -%}
        <custom-cursor class="custom-cursor touch:hidden">
          <button class="play-button" type="button">
            <span class="sr-only">{{ 'general.accessibility.play_video' | t }}</span>
            {%- render 'icon' with 'play-triangle' -%}
          </button>
        </custom-cursor>
      {%- endif -%}
    </video-media>

  {%- when 'model' -%}
    <model-media {% if class %}class="{{ class }}"{% endif %} {% if style %}style="{{ style }}"{% endif %} {% if group != blank %}group="{{ group | escape }}"{% endif %} handle="{{ product.handle }}" style="aspect-ratio: {{ media.preview_image.aspect_ratio }}" {{ block.shopify_attributes }}>
      {{- media | model_viewer_tag: image_size: '2048x', reveal: 'interaction', toggleable: true -}}
    </model-media>
{%- endcase -%}